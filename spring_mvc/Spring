SpringMVC入门
核心学习内容: SpringMVC执行流程和SSM框架整合;

1. 什么是mvc
    M: 模型 dao service
    V: 视图 jsp
    C: 控制器 servlet  (所有控制器底层都是Servlet) <br />
        dao层连接数据库 -> service只负责业务 -> servlet接收前端数据
        servlet接收前端数据 -> 交给service处理 -> 跳转页面(转发 和重定向)

前端 -> 数据传输 -> 实体类
    如果是一个登录页面,我们只需要username和password,假如前端传过来很多字段都是没用的,
    这个时候我们就可以创建UserVo,里面只写上要接受的字段即可; UserVo和User两个实体类是互不干扰的;

JSP本质就是一个Servlet;早期开发是使用JSP
在web项目中,如果为了安全,可以把页面放在WEB-INF中,对用户不可见;公共页面可以放在web包下;
=====================================================================================
MVC框架要做的事情
    1. 将url映射到java类或者java类的方法;
    2. 封装用户提供的数据;
    3. 处理请求 -> 调用相关的业务处理 -> 封装响应数据;
    4. 将响应数据进行渲染 -> jsp/html等View表示层展示数据;
    <servlet>
        <servlet-name>helloServlet</servlet-name>
        <servlet-class>com.yqx.servlet.HelloServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>helloServlet</servlet-name>
        这里一定要注意 要添加 /
        <url-pattern>/</url-pattern>
    </servlet-mapping>

MVVM:
    M V         VM -> ViewModel -> 双向绑定 -> vue学习;
=====================================================================================

SpringMVC正式入门
Sprign是基于Java实现MVC的轻量级web框架; 也就是Servlet;
    ResuFul风格 支持数据验证,格式化,本地化,主题;
    Spring的web框架围绕DispatcherServlet(所有的请求分发)调度Servlet设计;
    DispatcherServlet的作用是将请求分发到不同的处理器!

          |> 加一层DispatcherServlet调度器负责 -> 调度,处理请求,适配URL,跳转页面等;
用户输入url -> 调用servlet -> 调用service -> 调用dao -> 调用数据库

=====================================================================================

搭建Spring
1. 在web.xml中配置SpringMVC核心控制器DispatcherServlet
    <!-- SpringMVC入门 -->
    <!-- 1. 注册DispatcherServlet -->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!-- 关联一个SpringMVC的配置文件 -> servlet-name -> servlet.xml -->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:springmvc-servlet.xml</param-value>
        </init-param>
        <!-- 启动级别 -> 1 -->
        <load-on-startup>1</load-on-startup>
    </servlet>

    <!-- /  匹配所有的请求 不包括jsp -->
    <!-- /* 匹配所有的请求 包括jsp -->
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

2. 创建springmvc-servlet.xml 相当于Spring的配置文件
    <?xml version="1.0" encoding="UTF-8"?>
    <beans xmlns="http://www.springframework.org/schema/beans"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
        <!-- 处理器 映射器 -->
        <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping" />
        <!-- 处理器适配器 -->
        <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter" />
        <!-- 视图解析器 -> 执行流程
            1. 获取了ModelAndView中的数据
            2. 解析ModelAndView中的视图名字;
            3. 拼接视图名字 找到对应的应用;      /WEB-INF/jsp/xxx.jsp
            4. 将数据渲染到这个视图中-->
        <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" id="internalResourceViewResolver">
            <!-- 前缀 -->
            <property name="prefix" value="/WEB-INF/jsp/" />
            <!-- 后缀 -->
            <property name="suffix" value=".jsp" />
        </bean>
        <!-- 从Spring跳到Handler 而不是从web.xml中跳转 -->
        <bean class="com.yqx.controller.HelloController" id="/hello" />
    </beans>

3. 编写controller层
    public class HelloController implements Controller {
        @Override
        public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception {
            // ModelAndView 模型和视图
            ModelAndView modelAndView = new ModelAndView();
            // 封装对象 放在ModelAndView中
            modelAndView.addObject("msg","HelloSpringMVC");
            // 封装要跳转的视图,放在ModelAndView中  也就是/WEB-INF/jsp/hello.jsp
            modelAndView.setViewName("hello");
            return modelAndView;
        }
    }
4. 配置tomcat,如果404的话可以去看看Artifacts项目中是否有lib包,如果没有则新建一个.

SpringMVC执行流程
    1. DispatcherServlet表示前置控制器,是整个SpringMVC的控制中心;
        用户发送请求,DispatcherServlet接受请求并拦截请求;
    2. HandlerMapping为处理器映射,DispatcherServlet会自动调用HandlerMapping,
        HandlerMapping根据请求url查找对应的Handler;
    3. HandlerExecution表示具体的Handler,主要作用是根据url查找控制器;也就是对应的Controller;
    4. HandlerExecution将解析后的信息传递给DispatcherServlet,如解析控制器映射等;
    5. HandlerAdapter表示处理器进行适配,按照特定的规则去执行Handler;
    6. Handler让具体的Controller执行;
    7. Controller(调用业务层)将己题的执行信息返回给HandlerAdapter,也就是ModelAndView;
    8. HandlerAdapter将视图逻辑名或者模型传递给DispatcherServlet;
    9. DispatcherServlet调用视图解析器ViewResolver来解析HandlerAdapter传递的逻辑视图名;
    10. 视图解析器将解析的逻辑视图名传递给DispatcherServlet;
    11. DispatcherServlet根据视图解析器解析的视图结果,调用具体的视图;
    12. 最终视图呈现给用户;

1. 用户发送请求的时候会经过一个前置控制器DispatcherServlet;
2. DispatcherServlet会根据这个请求找到对应的映射器,HandlerMapping;
3. 找到映射器之后返回给DispatcherServlet,然后再去适配这个映射器HandlerAdapter;
4. 适配映射器也就是找到对应的controller,controller调用业务层;
5. controller执行后会返回一个ModelAndView;
6. 通过ModelAndView去配置对应的视图解析器;
7. 视图解析器返回给前端调用,展示哪个视图;






























































