<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">

    <bean class="com.yqx.kuang.UserServiceImpl" id="userService" />
    <bean class="com.yqx.log.AfterLog" id="afterLog" />
    <bean class="com.yqx.log.BeforeLog" id="beforeLog" />
    
    <!-- 配置aop 使用原生SpringAPI接口 -->
    <aop:config>
        <!-- 切入点 expression表达式; execution要执行的未知-->
        <aop:pointcut id="pointcut" expression="execution(* com.yqx.kuang.UserServiceImpl.*(..))"/>

        <!-- 执行环绕增强 -->
        <aop:advisor advice-ref="beforeLog" pointcut-ref="pointcut" />
        <aop:advisor advice-ref="afterLog" pointcut-ref="pointcut"/>
    </aop:config>








    <!-- MyTest -->
    <!-- 方式一 通过Spring原生API进行操作 -->
    <!-- 第一步 注入Bean对象 -->
    <bean class="com.test.method1.log.ALog" id="alog"/>
    <bean class="com.test.method1.log.BLog" id="bLog"/>
    <bean class="com.test.method1.service.PersonServiceImpl" id="personService" />

    <!-- 第二步 配置切面 首先要引入aop支持依赖 -->
    <aop:config>
        <!-- 配置 切入点 -->
        <aop:pointcut id="pointcut1" expression="execution(* com.test.method1.service.PersonServiceImpl.*(..))"/>
        <!-- 执行环绕增加 -->
        <aop:advisor advice-ref="alog" pointcut-ref="pointcut1" />
        <aop:advisor advice-ref="bLog" pointcut-ref="pointcut1" />
    </aop:config>



    <!-- 方式二 通过自定义切面类实现 -->
    <!-- 1. 注册bean对象 -->
    <bean class="com.test.method2.DiyMethodAOP" id="diy" />
    <!-- 2. 配置切面 -->
    <aop:config>
        <!-- 3. 配置自定义切面 -->
        <aop:pointcut id="diyAop" expression="execution(* com.test.method1.service.PersonServiceImpl.*(..))"/>
        <!-- ref指向的就是一个类 -->
        <aop:aspect ref="diy">
            <aop:after method="after" pointcut-ref="diyAop" />
            <aop:before method="before" pointcut-ref="diyAop" />
        </aop:aspect>
    </aop:config>


    <!-- 方式三 按照注解方式进行AOP -->
    <bean class="com.test.method3.AnnotationPointCut" id="annotationPointCut" />
    <!-- 开启注解支持 -->
    <aop:aspectj-autoproxy />
    <context:annotation-config />









</beans>